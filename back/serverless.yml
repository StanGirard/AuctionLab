org: girardstanislas
app: auctionlab
custom: 
  stage: ${opt:stage, self:provider.stage}
  userTable: ${self:custom.stage}-makeauctionsngreatagain-usertable
  dbLogin: magaUser
  dbPassword: testtest


# NOTE: update this with your service name
service: maga-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables


provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256 # optional, in MB, default is 1024
  timeout: 10
  environment:
    userTable: ${self:custom.userTable}
    dbLogin: $(self:custom.dbLogin)
    dbPassword: $(self:custom.dbPassword)
  stage: dev
  region: eu-west-1
  iamRoleStatements: 
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # Restrict our IAM role permissions to # the specific table for the stage 
      Resource:
        - "Fn::GetAtt": [ MagaDB, Arn ]
        - "Fn::Join":
          - "/"
          -
            - { "Fn::GetAtt": [MagaDB, Arn ] }
            - "index/*"
    - Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: 
        - "*"
    - Effect: Allow
      Action: 
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource:
        - "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"

 

functions:
  dbInit:
    handler: functions/db/init.handler
    events:
      - http:
          path: db/init
          method: get
  clientsCreate:
    handler: functions/clients/new.main
    events:
      - http:
          path: /clients/{id}
          method: post
          cors: true
  clientsGet:
    handler: functions/clients/get.main
    events:
      - http:
          path: /clients/{id}
          method: get
          cors: true
  clientsGetList:
    handler: functions/clients/getList.main
    events:
      - http:
          path: /clients
          method: get
          cors: true
  particulierCreate:
    handler: functions/particulier/new.main
    events:
      - http:
          path: /particulier/{id}
          method: post
          cors: true
  entrepriseCreate:
    handler: functions/entreprise/new.main
    events:
      - http:
          path: /entreprise/{id}
          method: post
          cors: true
  employeCreate:
    handler: functions/employe/new.main
    events:
      - http:
          path: /employe/{id}
          method: post
          cors: true
  documentsCreate:
    handler: functions/documents/new.main
    events:
      - http:
          path: /documents/{id}
          method: post
          cors: true
  addresseCreate:
    handler: functions/addresse/new.main
    events:
      - http:
          path: /addresse/{id}
          method: post
          cors: true
  addresseGet:
    handler: functions/addresse/get.main
    events:
      - http:
          path: /addresse/{id}
          method: get
          cors: true
  addresseGetList:
    handler: functions/addresse/getList.main
    events:
      - http:
          path: /addresse
          method: get
          cors: true
  clientsUpdate:
    handler: functions/clients/update.main
    events:
      - http:
          path: /clients/{id}
          method: put
          cors: true
  clientsDelete:
    handler: functions/clients/delete.main
    events:
      - http:
          path: /clients/{id}
          method: delete
          cors: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/aurora-db.yml)}

