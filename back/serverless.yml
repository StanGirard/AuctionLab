org: girardstanislas
app: auctionlab
custom: 
  stage: ${opt:stage, self:provider.stage}
  userTable: ${self:custom.stage}-makeauctionsngreatagain-usertable
  dbLogin: magaUser
  dbPassword: testtest


# NOTE: update this with your service name
service: maga-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables


provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256 # optional, in MB, default is 1024
  timeout: 10
  environment:
    userTable: ${self:custom.userTable}
    dbLogin: $(self:custom.dbLogin)
    dbPassword: $(self:custom.dbPassword)
  stage: dev
  region: eu-west-1
  iamRoleStatements: 
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # Restrict our IAM role permissions to # the specific table for the stage 
      Resource:
        - "Fn::GetAtt": [ MagaDB, Arn ]
        - "Fn::Join":
          - "/"
          -
            - { "Fn::GetAtt": [MagaDB, Arn ] }
            - "index/*"
    - Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: 
        - "*"
    - Effect: Allow
      Action: 
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource:
        - "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"

 

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  test:
    handler: functions/db/test.handler
    events:
      - http:
          path: test
          method: get
  createUser:
    handler: functions/user/create.main
    events:
      - http:
          path: /user/create
          method: post
          cors: true
  getUserType:
    handler: functions/user/getAllType.main
    events:
      - http:
          path: /user/get/{type}
          method: get
          cors: true
          request:
            parameters:
              paths:
                type: true


resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/aurora-db.yml)}
